<?xml version="1.0" encoding="utf-8"?>
<wso2registry>

    <!-- These are used to define the DB configuration and the basic parameters to be used for the registry -->

    <currentDBConfig>wso2registry</currentDBConfig>
    <readOnly>false</readOnly>
    <enableCache>true</enableCache>
    <registryRoot>/</registryRoot>

    <!-- This defines the default database and its configuration of the registry -->

    <dbConfig name="wso2registry">
        <dataSource>jdbc/WSO2CarbonDB</dataSource>
    </dbConfig>

    {% if CONFIG_PARAM_REGISTRY_DB_URL is defined -%}
    <dbConfig name="governance">
        <dataSource>jdbc/WSO2RegistryDB</dataSource>
    </dbConfig>

	{% if CONFIG_PARAM_LOCAL_MEMBER_HOST is defined -%}
    	{% if CONFIG_PARAM_HTTPS_SERVLET_PORT is defined -%}
    <remoteInstance url="https://{{CONFIG_PARAM_LOCAL_MEMBER_HOST}}:{{CONFIG_PARAM_HTTPS_SERVLET_PORT}}/registry">
    	{% else -%}
    <remoteInstance url="https://{{CONFIG_PARAM_LOCAL_MEMBER_HOST}}:9443/registry">
    	{% endif -%}	
    {% else -%}
    	{% if CONFIG_PARAM_HTTPS_SERVLET_PORT is defined -%}
    <remoteInstance url="https://localhost:{{CONFIG_PARAM_HTTPS_SERVLET_PORT}}/registry">
    	{% else -%}
    <remoteInstance url="https://localhost:9443/registry">
    	{% endif -%}
    {% endif -%}
        <id>governance</id>
        <dbConfig>governance</dbConfig>
    {% if CONFIG_PARAM_SUB_DOMAIN is defined -%}
        {% if CONFIG_PARAM_SUB_DOMAIN == 'mgt' -%}
        <readOnly>false</readOnly>
        {%  endif -%}
    {%  else -%}
        <readOnly>false</readOnly>
    {%  endif -%}
        <enableCache>true</enableCache>
        <registryRoot>/</registryRoot>
        <cacheId>{{CONFIG_PARAM_REGISTRY_DB_USER_NAME}}@{{CONFIG_PARAM_REGISTRY_DB_URL}}</cacheId>
    </remoteInstance>
    
    <mount path="/_system/governance" overwrite="true">
        <instanceId>governance</instanceId>
        <targetPath>/_system/governance</targetPath>
    </mount>
    {% endif -%}

    {% if CONFIG_PARAM_CONFIG_DB_URL is defined -%}
    <dbConfig name="config">
 	<dataSource>jdbc/WSO2ConfigDB</dataSource>
    </dbConfig>

    {% if CONFIG_PARAM_LOCAL_MEMBER_HOST is defined -%}
    	{% if CONFIG_PARAM_HTTPS_SERVLET_PORT is defined -%}
    <remoteInstance url="https://{{CONFIG_PARAM_LOCAL_MEMBER_HOST}}:{{CONFIG_PARAM_HTTPS_SERVLET_PORT}}/registry">
    	{% else -%}
    <remoteInstance url="https://{{CONFIG_PARAM_LOCAL_MEMBER_HOST}}:9443/registry">
    	{% endif -%}	
    {% else -%}
    	{% if CONFIG_PARAM_HTTPS_SERVLET_PORT is defined -%}
    <remoteInstance url="https://localhost:{{CONFIG_PARAM_HTTPS_SERVLET_PORT}}/registry">
    	{% else -%}
    <remoteInstance url="https://localhost:9443/registry">
    	{% endif -%}
    {% endif -%}
        <id>config</id>
        <dbConfig>config</dbConfig>
     {% if CONFIG_PARAM_SUB_DOMAIN is defined -%}
        {% if CONFIG_PARAM_SUB_DOMAIN == 'mgt' -%}
        <readOnly>false</readOnly>
        {%  endif -%}
    {%  else -%}
        <readOnly>false</readOnly>
    {%  endif -%}
        <registryRoot>/</registryRoot>
 	<enableCache>true</enableCache>
        <cacheId>{{CONFIG_PARAM_CONFIG_DB_USER_NAME}}@{{CONFIG_PARAM_CONFIG_DB_URL}}</cacheId>
    </remoteInstance>

    <mount path="/_system/config" overwrite="true">
        <instanceId>config</instanceId>
        <targetPath>/_system/config</targetPath>
    </mount>
    {% endif -%}

    <!-- This handler provides the feature to add a simlink to a given resource -->

    <handler class="org.wso2.carbon.registry.extensions.handlers.ExtensionsSymLinkHandler" profiles="default,uddi-registry">
        <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.URLMatcher">
            <property name="pattern">.*</property>
        </filter>
    </handler>

    <!-- This handler provides resource retention locking for the resources -->

    <handler class="org.wso2.carbon.registry.extensions.handlers.RetentionHandler" 
            methods="PUT,DELETE,MOVE,RENAME,IMPORT,COPY,ADD_ASSOCIATION,REMOVE_ASSOCIATION,RESTORE,RESTORE_VERSION">
        <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.URLMatcher">
            <property name="pattern">.*</property>
        </filter>
    </handler>

    <!-- This handler process the uploaded  WSDL files -->

    <handler class="org.wso2.carbon.registry.extensions.handlers.WSDLMediaTypeHandler" profiles="default,uddi-registry">
        <!--property name="createService">false</property>
        <property name="disableWSDLValidation">true</property-->
        <property name="disableSymlinkCreation">true</property>
        <property name="createSOAPService">true</property>
        <!-- Deprecated xml configuration : start-->
        <property name="schemaLocationConfiguration" type="xml">
            <location>/trunk/schemas/</location>            
        </property>
            <property name="wsdlLocationConfiguration" type="xml">
                <location>/trunk/wsdls/</location>
        </property>
            <property name="policyLocationConfiguration" type="xml">
                <location>/trunk/policies/</location>
        </property>
        <!-- Deprecated xml configuration : end-->

        <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
            <property name="mediaType">application/wsdl+xml</property>
        </filter>
    </handler>

    <!-- This handler processes .zip & .gar files being added to the registry -->

    <handler class="org.wso2.carbon.registry.extensions.handlers.ZipWSDLMediaTypeHandler" profiles="default,uddi-registry">
        <property name="wsdlMediaType">application/wsdl+xml</property>
        <property name="schemaMediaType">application/xsd+xml</property>
        <property name="threadPoolSize">50</property>
        <property name="disableSymlinkCreation">true</property>
        <property name="createSOAPService">true</property>
        <!--property name="createService">false</property>
	    <property name="useOriginalSchema">true</property>
        <property name="disableWSDLValidation">true</property>
	    <property name="disableWADLValidation">true</property>
        <property name="disableSchemaValidation">true</property>
        <property name="wsdlExtension">.wsdl</property>
        <property name="schemaExtension">.xsd</property>
        <property name="archiveExtension">.gar</property>
        <property name="tempFilePrefix">wsdl</property-->
        <property name="numberOfRetry">3</property>

        <!-- Deprecated xml configuration : start-->
        <property name="schemaLocationConfiguration" type="xml">
            <location>/trunk/schemas/</location>
        </property>
        <property name="wsdlLocationConfiguration" type="xml">
            <location>/trunk/wsdls/</location>
        </property>
        <property name="wadlLocationConfiguration" type="xml">
            <location>/trunk/wadls/</location>
        </property>
        <!-- Deprecated xml configuration : end-->
	    <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
            <property name="mediaType">application/vnd.wso2.governance-archive</property>
        </filter>
    </handler>

    <!-- This handler processes the swagger documents being added to the registry -->

    <handler class="org.wso2.carbon.registry.extensions.handlers.SwaggerMediaTypeHandler" profiles="default,uddi-registry">
        <!-- Deprecated xml configuration : start-->
        <property name="swaggerLocationConfiguration" type="xml">
            <location>/apimgt/applicationdata/api-docs/</location>
        </property>
        <property name="restServiceLocationConfiguration" type="xml">
            <location>/apimgt/applicationdata/provider/</location>
        </property>
        <property name="endpointLocationConfiguration" type="xml">
            <location>/trunk/endpoints/</location>
        </property>
        <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
            <property name="mediaType">application/swagger+json</property>
        </filter>
        <!-- Deprecated xml configuration : end-->
    </handler>

    <!-- This handler processes the services being added to the registry -->

    <handler class="org.wso2.carbon.registry.extensions.handlers.ServiceMediaTypeHandler" profiles="default,uddi-registry">
        <!--property name="disableWSDLValidation">true</property-->
        <property name="defaultServiceVersion">1.0.0-SNAPSHOT</property>
        <property name="disableSymlinkCreation">true</property>
        <property name="smartLifecycleLinks" type="xml">
            <key>dev</key>
            <key>qa</key>
            <key>live</key>
        </property>        
        <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
            <property name="mediaType">application/vnd.wso2-service+xml</property>
        </filter>
    </handler>

    <!-- This handler processes the soap services being added to the registry -->

    <handler class="org.wso2.carbon.registry.extensions.handlers.SOAPServiceMediaTypeHandler" profiles="default,uddi-registry">
        <!--property name="disableWSDLValidation">true</property-->
        <property name="defaultServiceVersion">1.0.0-SNAPSHOT</property>
        <property name="disableSymlinkCreation">true</property>
        <property name="smartLifecycleLinks" type="xml">
            <key>dev</key>
            <key>qa</key>
            <key>live</key>
        </property>
        <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
            <property name="mediaType">application/vnd.wso2-soap-service+xml</property>
        </filter>
    </handler>

    <!--This handler will delete resources individually when deleting a collection of resources-->

    <handler class="org.wso2.carbon.registry.extensions.handlers.RecursiveDeleteHandler">
         <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.URLMatcher">
                <property name="deletePattern">/_system/governance/.*</property>
         </filter>
    </handler>

    <!-- This handler provides the ability to remove the entire heirarchy for a given service while deleting the service -->

    <handler class="org.wso2.carbon.registry.extensions.handlers.DeleteHierarchyHandler" profiles="default,uddi-registry">
        <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
            <property name="mediaType">application/vnd.wso2-service+xml</property>
        </filter>
    </handler>    


   <!--This handler delete the subscription hierarcy generated in the notifications path when a subscription is deleted directly -->

    <handler class="org.wso2.carbon.registry.extensions.handlers.DeleteHierarchyHandler">
        <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.URLMatcher">
            <property name="deletePattern">/_system/governance/event/topics/registry/notifications/.*</property>
        </filter>
    </handler>


    <!-- This handler processes the links for the lifecycle -->

    <handler class="org.wso2.carbon.registry.extensions.handlers.SmartLifecycleLinkHandler" profiles="default,uddi-registry">
        <property name="states" type="xml">
            <state key="dev">Created</state>
            <state key="qa">Tested</state>
            <state key="live">Deployed</state>
        </property>
        <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
            <property name="mediaType">application/vnd.wso2-smart-link</property>
        </filter>
    </handler>

    <!-- This handler processes the policy files of the given media type defined by the filter -->

    <handler class="org.wso2.carbon.registry.extensions.handlers.PolicyMediaTypeHandler" profiles="default,uddi-registry">
	    <property name="policyLocationConfiguration" type="xml">
            <location>/trunk/policies/</location>            
	    </property>
        <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
            <property name="mediaType">application/policy+xml</property>
        </filter>
    </handler>

    <!-- This handler processes the schema types which are defined by the filter  -->

    <handler class="org.wso2.carbon.registry.extensions.handlers.XSDMediaTypeHandler" profiles="default,uddi-registry">
        <!--property name="disableSchemaValidation">true</property-->
        <property name="disableSymlinkCreation">true</property>
        <property name="locationConfiguration" type="xml">
            <location>/trunk/schemas/</location>            
        </property>
        <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
            <property name="mediaType">application/x-xsd+xml</property>
        </filter>
    </handler>

    <!-- This handler processes making an external link to a given resource -->

    <handler class="org.wso2.carbon.registry.extensions.handlers.ExternalLinkHandler">
        <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
            <property name="mediaType">application/vnd.wso2-hyperlink</property>
        </filter>
    </handler>

    <!-- This handler processes service end-points defined in the WSDL files being uploaded to the registry -->

    <handler class="org.wso2.carbon.registry.extensions.handlers.EndpointMediaTypeHandler" profiles="default,uddi-registry">
        <property name="endpointMediaType">application/vnd.wso2-endpoint+xml</property>
        <property name="includeNamespaceInName">true</property>
        <!-- Deprecated xml configuration : start-->
        <property name="endpointLocationConfiguration" type="xml">
            <location>/trunk/endpoints/</location>
        </property>
        <!-- Deprecated xml configuration : end-->
        <filter class="org.wso2.carbon.registry.extensions.filters.EndpointMediaTypeMatcher">
        </filter>
    </handler>

    <handler class="org.wso2.carbon.governance.registry.extensions.handlers.UriMediaTypeHandler" profiles="default,uddi-registry">
	    <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
	        <property name="mediaType">application/vnd.wso2-uri+xml</property>
	    </filter>
    </handler>
    
    <handler class="org.wso2.carbon.registry.extensions.handlers.WADLMediaTypeHandler" profiles="default,uddi-registry">
       <!--<property name="disableWADLValidation">true</property>-->

        <!-- Deprecated xml configuration : start-->
       <property name="wadlLocationConfiguration" type="xml">
            <location>/trunk/wadls/</location>
       </property>
       <property name="schemaLocationConfiguration" type="xml">
            <location>/trunk/schemas/</location>
       </property>
        <!-- Deprecated xml configuration : end-->
       <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
            <property name="mediaType">application/wadl+xml</property>
       </filter>
    </handler>

    <!-- When a resource/governance artifact is deleted, this handler will cleanup all its bounded subscriptions from registry-->

    <handler class="org.wso2.carbon.registry.extensions.handlers.DeleteSubscriptionHandler">
         <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.URLMatcher">
                 <property name="pattern">.*</property>
         </filter>
    </handler>

    <!--This handler manage the meta data resource caching-->
    <handler class="org.wso2.carbon.governance.registry.extensions.handlers.MetaDataCacheHandler" profiles="default,uddi-registry">
        <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.URLMatcher">
            <property name="pattern">.*</property>
        </filter>
    </handler>

    <handler class="org.wso2.carbon.registry.indexing.IndexingHandler" profiles="default,uddi-registry">
        <filter class="org.wso2.carbon.registry.indexing.filter.MediaTypeFilter">
            <property name="mediaTypeRegEx">application*</property>
        </filter>
    </handler>

    <!--remoteInstance url="https://localhost:9443/registry">
	<id>instanceid</id>
	    <username>username</username>
	    <password>password</password>
        <cacheId>wso2carbon@jdbc:h2:repository/database/WSO2CARBON_DB</cacheId>
    </remoteInstance-->

    <!-- This defines the Atom based remote registry instance configuration -->

    <!--remoteInstance url="https://localhost:9443/registry">
        <id>instanceid</id>
        <username>username</username>
        <password>password</password>
        <type>ws</type>
        <cacheId>wso2carbon@jdbc:h2:repository/database/WSO2CARBON_DB</cacheId>
    </remoteInstance-->

    <!-- This defines the JDBC based remote registry instance configuration  -->

    <!--remoteInstance url="https://localhost:9443/registry">
        <id>instanceid</id>
        <dbConfig>wso2registry</dbConfig>
        <readOnly>false</readOnly>
        <enableCache>true</enableCache>
        <registryRoot>/</registryRoot>
    </remoteInstance-->

    <!-- This defines the mount configuration to be used with the remote instance and the target path for the mount -->

    <!--mount path="/_system/config" overwrite="true|false|virtual">
        <instanceId>instanceid</instanceId>
        <targetPath>/_system/nodes</targetPath>
    </mount-->

    <!-- This defines index cofiguration which is used in meta data search feature of the registry -->
		
    <indexingConfiguration>
        <startIndexing>true</startIndexing>
        <startingDelayInSeconds>35</startingDelayInSeconds>
        <indexingFrequencyInSeconds>3</indexingFrequencyInSeconds>
        <!--number of resources submit for given indexing thread -->
        <batchSize>50</batchSize>
         <!--number of worker threads for indexing -->
        <indexerPoolSize>50</indexerPoolSize>
        <!-- location storing the time the indexing took place-->
        <lastAccessTimeLocation>/_system/local/repository/components/org.wso2.carbon.registry/indexing/lastaccesstime</lastAccessTimeLocation>
        <!-- the indexers that implement the indexer interface for a relevant media type/(s) -->
        <indexers>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.MSExcelIndexer" mediaTypeRegEx="application/vnd.ms-excel"/>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.MSPowerpointIndexer" mediaTypeRegEx="application/vnd.ms-powerpoint"/>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.MSWordIndexer" mediaTypeRegEx="application/msword"/>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.PDFIndexer" mediaTypeRegEx="application/pdf"/>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.XMLIndexer" mediaTypeRegEx="application/xml"/>
            <indexer class="org.wso2.carbon.governance.registry.extensions.indexers.RXTIndexer" mediaTypeRegEx="application/wsdl\+xml" profiles ="default,uddi-registry"/>
            <indexer class="org.wso2.carbon.governance.registry.extensions.indexers.RXTIndexer" mediaTypeRegEx="application/x-xsd\+xml" profiles ="default,uddi-registry"/>
            <indexer class="org.wso2.carbon.governance.registry.extensions.indexers.RXTIndexer" mediaTypeRegEx="application/policy\+xml" profiles ="default,uddi-registry"/>
            <indexer class="org.wso2.carbon.governance.registry.extensions.indexers.RXTIndexer" mediaTypeRegEx="application/vnd.(.)+\+xml" profiles ="default,uddi-registry"/>
            <indexer class="org.wso2.carbon.governance.registry.extensions.indexers.RXTIndexer" mediaTypeRegEx="application/wadl\+xml" profiles ="default,uddi-registry"/>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.XMLIndexer" mediaTypeRegEx="application/(.)+\+xml"/>
                        <indexer class="org.wso2.carbon.registry.indexing.indexer.JSONIndexer" mediaTypeRegEx="application/swagger\+json"/>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.PlainTextIndexer" mediaTypeRegEx="application/(.)+\+json"/>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.PlainTextIndexer" mediaTypeRegEx="text/(.)+"/>
            <indexer class="org.wso2.carbon.registry.indexing.indexer.PlainTextIndexer" mediaTypeRegEx="application/x-javascript"/>
        </indexers>
        <exclusions>
            <exclusion pathRegEx="/_system/config/repository/dashboards/gadgets/swfobject1-5/.*[.]html"/>
            <exclusion pathRegEx="/_system/local/repository/components/org[.]wso2[.]carbon[.]registry/mount/.*"/>
        </exclusions>
    </indexingConfiguration>
   
    <!-- This static configuration is suppose to be modified before any data being loaded to the registry (i.e.: before the first startup) -->
    
    <staticConfiguration>
        <versioningProperties>true</versioningProperties>
        <versioningComments>true</versioningComments>
        <versioningTags>true</versioningTags>
        <versioningRatings>true</versioningRatings>
        <!-- Location you want to add service and default location will be /services/ -->
        <servicePath>/trunk/services/</servicePath>
    </staticConfiguration>

    <!-- This enables auto-versioning of resources (non-collection). Whenever a resource is updated a new version will be created -->
  
    <versionResourcesOnChange>false</versionResourcesOnChange>

    <!-- This enables JMX management for G-Reg -->
    
    <jmx enabled="false">
        <service name="InvocationStatistics" enabled="true"/>
        <service name="Activities" enabled="true"/>
        <service name="Properties" enabled="true"/>
        <service name="Subscriptions" enabled="true"/>
        <service name="Events" enabled="true"/>
    </jmx>
    
    <!-- If you need to use a Remote Human Task to provide the Work List functionality instead of the Embedded Human Task or if you want
         to use Work List notifications, uncomment the following configuration. Please note that you need to provide the credentials 
         and URL to connect to the remote instance (ex:- remote BPS server) if you are planning to use a Remote Human Task. You should
         provide credentials and URL to connect to the local instance if you simply want to use Work List notifications. -->
    
    {% if CONFIG_PARAM_WORKLIST_SERVER_URL is defined -%}
    <workList serverURL="{{CONFIG_PARAM_WORKLIST_SERVER_URL}}" remote="{{CONFIG_PARAM_WORKLIST_REMOTE_SERVER}}">
        <username>{{CONFIG_PARAM_WORKLIST_SERVER_USERNAME}}</username>
        <password>{{CONFIG_PARAM_WORKLIST_SERVER_PASSWORD}}</password>
    </workList>
    	
	{% else -%}
    <workList serverURL="local://services/" remote="false">
        <username>admin</username>
        <password>admin</password>
    </workList>
    	
    {%  endif -%}
    
    <!-- Sample SCM configuration. Please note that checkOutURL, workingDir, and mountPoint are mandatory for each connection. 
         The update frequency is in minutes. Setting readOnly would disable checkIn even if the checkInURL is set. The credentials
         are to connect to the corresponding repository and must be provided if required. -->
    
    {% if CONFIG_PARAM_SCM_CHECKOUT_URL is defined -%}
    	<scm>
        	<connection checkOutURL="{{CONFIG_PARAM_SCM_CHECKOUT_URL}}" 
        		workingDir="{{CONFIG_PARAM_SCM_WORKING_DIR}}" 
        		mountPoint="{{CONFIG_PARAM_SCM_MOUNT_POINT}}" 
        		{% if CONFIG_PARAM_SCM_CHECKIN_URL is defined -%}
        			checkInURL="{{CONFIG_PARAM_SCM_CHECKIN_URL}}"
        		{% else -%}
        			checkInURL="" 
        		{%  endif -%}
        		{% if CONFIG_PARAM_SCM_READONLY is defined -%}
        			readOnly="{{CONFIG_PARAM_SCM_READONLY}}"
        		{% else -%}
        			readOnly=""
        		{%  endif -%}
        		{% if CONFIG_PARAM_SCM_UPDATE_FREQUENCY is defined -%}
        			updateFrequency="{{CONFIG_PARAM_SCM_UPDATE_FREQUENCY}}"
        		{% else -%} 
        			updateFrequency=""
        		{%  endif -%}
        		>
        		<username>{{CONFIG_PARAM_SCM_USERNAME}}</username>
        		<password>{{CONFIG_PARAM_SCM_PASSWORD}}</password>
        	</connection>
    	</scm>
    
    {% else -%}
    	<!--scm>
        	<connection checkOutURL="scm:svn:http://svn.wso2.org/repos/wso2" workingDir="/valid/filesystem/path" mountPoint="/_system/foo" checkInURL="" readOnly="" updateFrequency="">
        		<username>admin</username>
        		<password>admin</password>
        	</connection>
    	</scm-->
    
    {%  endif -%}
    
    <!-- This defines the list of scheduled tasks for the registry -->
    
    <tasks>
        <!--task name="TaskName" class="com.foo.TaskClass">
            <trigger cron="cronExpr"/>
            <property key="foo" value="FooVal" />
            <property key="bar" value="BarVal" />
        </task-->
        <!--task name="MediationTask" class="org.wso2.carbon.governance.platform.extensions.mediation.MediationArtifactPopulatorTask">
            <trigger cron="0/10 * * * * ?"/>
            <property key="userName" value="admin" />
            <property key="password" value="admin" />
            <property key="serverUrl" value="https://localhost:9444/services/"/>
            <property key="proxyArtifactKey" value="proxy" />
            <property key="sequenceArtifactKey" value="sequence" />
            <property key="endpointArtifactKey" value="endpoint" />

        </task-->
  </tasks>


</wso2registry>
